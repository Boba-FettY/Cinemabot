import logging
import sqlite3
from telegram.ext import Application, MessageHandler, filters, \
    CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, Update
from kinopoisk_api import KP

con = sqlite3.connect("films.db")
cursor = con.cursor()
kinopoisk = KP(token='b4f90fec-97ab-42a7-9e36-38b77b977032')
last_film = None
start_reply_keyboard = [['üî¶–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º'],
                        ['üìº–ú–æ–∏ —Ñ–∏–ª—å–º—ã'], ['üïπ–ü–æ–º–æ—â—å']]
my_films_reply_keyboard = [['üíé–õ—é–±–∏–º—ã–µ'], ['‚è±–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'], ['üß∞–ü–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'], ['‚¨Ö–ù–∞–∑–∞–¥']]
my_films__markup = ReplyKeyboardMarkup(my_films_reply_keyboard, one_time_keyboard=False)
start_markup = ReplyKeyboardMarkup(start_reply_keyboard, one_time_keyboard=False)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


async def search_films(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.text == 'üî¶–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º':
        await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –µ–≥–æ)')
    elif update.message.text == 'üìº–ú–æ–∏ —Ñ–∏–ª—å–º—ã':
        await update.message.reply_text(
            "–í–∞—à–∏ —Ñ–∏–ª—å–º—ã:",
            reply_markup=my_films__markup
        )
    elif update.message.text == 'üïπ–ü–æ–º–æ—â—å':
        await update.message.reply_text('–Ø —Ç–µ–±–µ —á—Ç–æ –ø–æ–º–æ–≥–∞—Ç–æ—Ä —á—Ç–æ–ª–µ???')
    elif update.message.text == '‚¨Ö–ù–∞–∑–∞–¥':
        await update.message.reply_text('-–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é-',
                                        reply_markup=start_markup)
    elif update.message.text in ('üíé–õ—é–±–∏–º—ã–µ', '‚è±–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'üß∞–ü–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'):
        konverter = {'üíé–õ—é–±–∏–º—ã–µ': 'LUBIMIE', '‚è±–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å': 'HOCH_POSMOTRET',
                     'üß∞–ü–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ': 'PROSMOTRENIE'}
        tablica = f"SELECT name_film from {konverter[update.message.text]}" \
                  f" WHERE name = '{update.message.from_user.id}'"
        tablica = cursor.execute(tablica).fetchall()
        print(tablica)
        k = 1
        if tablica:
            keyboard = [
                [
                    InlineKeyboardButton("üîç–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="–ø–æ–¥"),
                    InlineKeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å", callback_data="–¥–µ–ª"),
                ],
                [InlineKeyboardButton("–í 'üß∞–ü–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'", callback_data="—Å–æ–º")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            for x in tablica:
                await update.message.reply_text(f'{k}.{x[0]}, {update.message.text[0]}',
                                                reply_markup=reply_markup)
                k += 1
        else:
            await update.message.reply_text(f'–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å —É –≤–∞—Ç –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤')
    else:
        naidenye = kinopoisk.search(update.message.text)
        if naidenye:
            await context.bot.send_photo(
                update.message.chat_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ö—É–¥–∞ –ø–æ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
                # –°—Å—ã–ª–∫–∞ –Ω–∞ static API, –ø–æ —Å—É—Ç–∏, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
                # –¢–µ–ª–µ–≥—Ä–∞–º—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä—è–º–æ –µ—ë, –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—É.
                naidenye[0].poster,
                caption=f"{naidenye[0].ru_name}, {naidenye[0].year}\n"
                        f"{', '.join(naidenye[0].genres)}\n"
                        f"{', '.join(naidenye[0].countries)}", reply_markup=start_markup)
            keyboard = [
                [
                    InlineKeyboardButton("–í 'üíé–õ—é–±–∏–º—ã–µ'", callback_data="1"),
                    InlineKeyboardButton("–í '‚è±–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'", callback_data="2"),
                ],
                [InlineKeyboardButton("–í 'üß∞–ü–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'", callback_data="3")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # global last_film
            # last_film = f'{naidenye[0].ru_name}, {naidenye[0].year}'
            await update.message.reply_text(f"–í –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º {naidenye[0].ru_name}, {naidenye[0].year}?",
                                            reply_markup=reply_markup)
        else:
            await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüôÅ',
                                            reply_markup=start_markup)


async def start(update, context):
    print(update.message.chat.last_name)
    await update.message.reply_text(
        "–Ø –ö–∏–Ω–æ–ø–æ–∏—Å–∫-–±–æ—Ç",
        reply_markup=start_markup
    )


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()
    if query.data in ('1', '2', '3'):
        imy_polzovately = query.from_user.id

        nazvanie_filma = query.message.text[30:-1]
        slovar_tablica = {'1': 'LUBIMIE', '2': 'HOCH_POSMOTRET', '3': 'PROSMOTRENIE'}
        proverka = f"SELECT * from {slovar_tablica[query.data]} WHERE name = '{imy_polzovately}'" \
                   f" AND name_film = '{nazvanie_filma}'"
        proverka = cursor.execute(proverka).fetchall()
        print(proverka)
        if not proverka:
            humus = f""" INSERT INTO {slovar_tablica[query.data]} (name, name_film) VALUES 
            ('{imy_polzovately}', '{nazvanie_filma}') """
            cursor.execute(humus)
            con.commit()
            await query.edit_message_text(text=f"***–í—ã–ø–æ–ª–Ω–µ–Ω–æ***")
        else:
            await query.edit_message_text(text=f"***–û—à–∏–±–∫–∞, —Ç–∞–∫–æ–π —É–∂–µ –µ—Å—Ç—å***")
    elif query.data == '–ø–æ–¥':
        naidenye = kinopoisk.search(query.message.text[2:-3])
        if naidenye:
            await context.bot.send_photo(
                query.message.chat_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ö—É–¥–∞ –ø–æ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
                # –°—Å—ã–ª–∫–∞ –Ω–∞ static API, –ø–æ —Å—É—Ç–∏, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
                # –¢–µ–ª–µ–≥—Ä–∞–º—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä—è–º–æ –µ—ë, –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—É.
                naidenye[0].poster,
                caption=f"{naidenye[0].ru_name}, {naidenye[0].year}\n"
                        f"{', '.join(naidenye[0].genres)}\n"
                        f"{', '.join(naidenye[0].countries)}", reply_markup=start_markup)
            keyboard = [
                [
                    InlineKeyboardButton("–í 'üíé–õ—é–±–∏–º—ã–µ'", callback_data="1"),
                    InlineKeyboardButton("–í '‚è±–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'", callback_data="2"),
                ],
                [InlineKeyboardButton("–í 'üß∞–ü–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'", callback_data="3")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # global last_film
            # last_film = f'{naidenye[0].ru_name}, {naidenye[0].year}'
            await query.message.reply_text(f"–í –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º {naidenye[0].ru_name}, {naidenye[0].year}?",
                                           reply_markup=reply_markup)
        else:
            print(query.message.text)
            await query.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüôÅ',
                                           reply_markup=start_markup)
    elif query.data in ('–¥–µ–ª', '—Å–æ–º'):
        konverter = {'üíé': 'LUBIMIE', '‚è±': 'HOCH_POSMOTRET', 'üß∞': 'PROSMOTRENIE'}
        naz_f = query.message.text[2:-3]
        cursor.execute(f"DELETE FROM {konverter[query.message.text[-1]]} WHERE name_film = '{naz_f}'"
                       f" AND name = '{query.from_user.id}'")
        con.commit()
        if query.data == '—Å–æ–º':
            imy_polzovately = query.from_user.id
            humus = f""" INSERT INTO PROSMOTRENIE (name, name_film) VALUES 
                        ('{imy_polzovately}', '{naz_f}') """
            cursor.execute(humus)
            con.commit()
            await query.edit_message_text(text="***–í—ã–ø–æ–ª–Ω–µ–Ω–æ***")
        else:
            await query.edit_message_text(text="***–£–¥–∞–ª–µ–Ω–æ***")


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, search_films)
    application.add_handler(text_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()
    con.close()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
